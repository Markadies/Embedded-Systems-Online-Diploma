
GPIO_Section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	//set LEDs at PD5,PD6,PD7
	DDRD = (0b11100000);
  6c:	80 ee       	ldi	r24, 0xE0	; 224
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  70:	12 ba       	out	0x12, r1	; 18

	//Set PD0 Button as input
	ClearBit(DDRD,0);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	81 bb       	out	0x11, r24	; 17
	SetBit(PORTD,0); //pull up button
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	82 bb       	out	0x12, r24	; 18
	
    while (1) 
    {
		if((ReadBit(PIND,0))==1)
  7e:	80 9b       	sbis	0x10, 0	; 16
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		{
			if((ReadBit(PORTD,5) || ReadBit(PORTD,6) || ReadBit(PORTD,7) ) == 0 )
  82:	95 99       	sbic	0x12, 5	; 18
  84:	07 c0       	rjmp	.+14     	; 0x94 <main+0x28>
  86:	96 99       	sbic	0x12, 6	; 18
  88:	08 c0       	rjmp	.+16     	; 0x9a <main+0x2e>
  8a:	97 9b       	sbis	0x12, 7	; 18
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <main+0x34>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 c0       	rjmp	.+16     	; 0xa4 <main+0x38>
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	05 c0       	rjmp	.+10     	; 0xa4 <main+0x38>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	89 2b       	or	r24, r25
  a6:	69 f4       	brne	.+26     	; 0xc2 <main+0x56>
			{
				SetBit(PORTD,5);
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	84 e3       	ldi	r24, 0x34	; 52
  b2:	9c e0       	ldi	r25, 0x0C	; 12
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x48>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
  c0:	de cf       	rjmp	.-68     	; 0x7e <main+0x12>
				_delay_ms(500);
			}
			else if((ReadBit(PORTD,6) || ReadBit(PORTD,7) ) ==0 )
  c2:	96 99       	sbic	0x12, 6	; 18
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <main+0x64>
  c6:	97 9b       	sbis	0x12, 7	; 18
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x6a>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	05 c0       	rjmp	.+10     	; 0xda <main+0x6e>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x6e>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	89 2b       	or	r24, r25
  dc:	69 f4       	brne	.+26     	; 0xf8 <main+0x8c>
			{
				SetBit(PORTD,6);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	84 e3       	ldi	r24, 0x34	; 52
  e8:	9c e0       	ldi	r25, 0x0C	; 12
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x7e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
  f6:	c3 cf       	rjmp	.-122    	; 0x7e <main+0x12>
				_delay_ms(500);					
			}
			else if( (ReadBit(PORTD,7) ) ==0)
  f8:	97 99       	sbic	0x12, 7	; 18
  fa:	c1 cf       	rjmp	.-126    	; 0x7e <main+0x12>
			{
				SetBit(PORTD,7);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	84 e3       	ldi	r24, 0x34	; 52
 106:	9c e0       	ldi	r25, 0x0C	; 12
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
 114:	b4 cf       	rjmp	.-152    	; 0x7e <main+0x12>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

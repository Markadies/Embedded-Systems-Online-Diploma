
GPIO_Section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000913  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	//set LEDs at PD5,PD6,PD7
	DDRD = (0b11100000);
  6c:	80 ee       	ldi	r24, 0xE0	; 224
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  70:	12 ba       	out	0x12, r1	; 18

    while (1) 
    {
		if((ReadBit(PORTD,5) || ReadBit(PORTD,6) || ReadBit(PORTD,7))==0)
  72:	95 99       	sbic	0x12, 5	; 18
  74:	07 c0       	rjmp	.+14     	; 0x84 <main+0x18>
  76:	96 99       	sbic	0x12, 6	; 18
  78:	08 c0       	rjmp	.+16     	; 0x8a <main+0x1e>
  7a:	97 9b       	sbis	0x12, 7	; 18
  7c:	09 c0       	rjmp	.+18     	; 0x90 <main+0x24>
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 c0       	rjmp	.+16     	; 0x94 <main+0x28>
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	05 c0       	rjmp	.+10     	; 0x94 <main+0x28>
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	89 2b       	or	r24, r25
  96:	69 f7       	brne	.-38     	; 0x72 <main+0x6>
		{
			SetBit(PORTD,5);
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
			_delay_ms(500);
			SetBit(PORTD,6);
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	84 e3       	ldi	r24, 0x34	; 52
  ba:	9c e0       	ldi	r25, 0x0C	; 12
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
			_delay_ms(500);
			SetBit(PORTD,7);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	84 e3       	ldi	r24, 0x34	; 52
  d2:	9c e0       	ldi	r25, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
			_delay_ms(500);
			ClearBit(PORTD,7);
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	9c e0       	ldi	r25, 0x0C	; 12
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x80>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x8a>
  f6:	00 00       	nop
			_delay_ms(500);
			ClearBit(PORTD,6);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	84 e3       	ldi	r24, 0x34	; 52
 102:	9c e0       	ldi	r25, 0x0C	; 12
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x98>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0xa2>
 10e:	00 00       	nop
			_delay_ms(500);
			ClearBit(PORTD,5);
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	82 bb       	out	0x12, r24	; 18
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	84 e3       	ldi	r24, 0x34	; 52
 11a:	9c e0       	ldi	r25, 0x0C	; 12
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0xb0>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xba>
 126:	00 00       	nop
 128:	a4 cf       	rjmp	.-184    	; 0x72 <main+0x6>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
